import os
import time
from googleapiclient.discovery import build
import subprocess
import re
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
import argparse


def parse_duration(iso_duration):
   match = re.match(r'PT(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)S)?', iso_duration)
   hours = int(match.group(1)) if match.group(1) else 0
   minutes = int(match.group(2)) if match.group(2) else 0
   seconds = int(match.group(3)) if match.group(3) else 0
   return hours * 3600 + minutes * 60 + seconds


def fetch_popular_videos(youtube, max_results=10):
   request = youtube.videos().list(
       part="snippet,contentDetails,statistics",
       chart="mostPopular",
       regionCode="US",
       maxResults=max_results,
   )
   response = request.execute()
   videos = []
   for video in response['items']:
       if video['snippet'].get('defaultAudioLanguage', 'en') == 'en':
           video_info = {
               'title': video['snippet']['title'],
               'video_id': video['id'],
               'duration': parse_duration(video['contentDetails']['duration'])
           }
           videos.append(video_info)
   return videos


def wait_for_ads_and_popups(driver):
   wait = WebDriverWait(driver, 60)
   time.sleep(5)
   while True:
       try:
           ad_skip_button = driver.find_elements(By.CLASS_NAME, "ytp-ad-skip-button")
           if ad_skip_button:
               ad_skip_button[0].click()
               print("Skipped an ad.")


           ad_indicator = driver.find_elements(By.CLASS_NAME, "ytp-ad-text")
           if ad_indicator:
                print("Ad detected, waiting...")
                time.sleep(5)


           premium_popup = driver.find_elements(By.XPATH, "//tp-yt-paper-dialog[@id='upsell-dialog']")
           if premium_popup:
               close_button = premium_popup[0].find_elements(By.XPATH, ".//yt-icon-button[@id='close-button']")
               if close_button:
                   close_button[0].click()
                   print("Closed YouTube Premium trial popup.")


           if not ad_skip_button and not ad_indicator and not premium_popup:
               print("No ads or pop-ups detected, ready to start recording.")
               break


           time.sleep(1)
       except Exception as e:
           print(f"Error handling ads/popups: {e}")
           break


def play_video_in_browser(video_url, start_time):
   options = webdriver.ChromeOptions()
   options.add_argument("--incognito")
   driver = webdriver.Chrome(options=options)  # Adjust path or options as needed
   driver.get(video_url)
   wait_for_ads_and_popups(driver)


   try:
       driver.execute_script(f"document.getElementById('movie_player').seekTo({start_time}, true);")
       fullscreen_button = driver.find_element(By.CSS_SELECTOR, ".ytp-fullscreen-button")
       fullscreen_button.click()
       print("Video playback is ready.")
       return driver
   except Exception as e:
       print(f"Error: {e}")
       driver.quit()


def record_screen_with_audio(duration, output_dir, output_file_name, delay=0):
   output_file = os.path.join(output_dir, output_file_name)
   os.makedirs(output_dir, exist_ok=True)


   # Assuming 1440x900 resolution, adjust for your screen resolution
   screen_width = 2875
   screen_height = 1850
   dpi = 125  # Default DPI; adjust if different


   # Calculate pixels to crop (2 inches converted to pixels)
   crop_top_pixels = int(2 * dpi)
   cropped_height = screen_height - crop_top_pixels


   time.sleep(delay)  # Wait before starting the recording


   subprocess.call([
       '/opt/homebrew/bin/ffmpeg',  # Adjust this path based on your installation
       '-y',
       '-f', 'avfoundation',
       '-thread_queue_size', '8192',
       '-i', "1:0",  # Video and audio input (adjust as necessary)
       '-vf', f"crop={screen_width}:{cropped_height}:0:{crop_top_pixels}",  # Crop video to exclude top 2 inches
       '-c:v', 'h264_videotoolbox',  # Hardware-accelerated video encoding for macOS
       '-preset', 'ultrafast',  # Lower encoding latency
       '-framerate', '30',  # Common frame rate
       '-c:a', 'aac',  # Standard audio codec
       '-b:a', '128k',  # Default audio bitrate
       '-ar', '16000',  # Default sample rate
       '-async', '1',  # Synchronize audio
       '-t', str(duration),
       output_file
   ])
   print(f"Recorded screen with audio, excluding top 2 inches: {output_file}")


def slice_video_into_segments(input_file, segment_duration, output_dir):
   """Slices the video into segments of specified duration."""
   os.makedirs(output_dir, exist_ok=True)
   try:
       duration = float(subprocess.check_output([
           'ffprobe',
           '-i', input_file,
           '-show_entries', 'format=duration',
           '-v', 'quiet',
           '-of', 'csv=p=0'
       ]).strip().decode('utf-8'))
   except ValueError as e:
       print(f"Error parsing video duration: {e}")
       return


   for i in range(0, int(duration), segment_duration):
       output_file = os.path.join(output_dir, f"segment_{i // segment_duration + 1}.mp4")
       subprocess.call([
           'ffmpeg',
           '-i', input_file,
           '-ss', str(i),
           '-t', str(segment_duration),
           '-c', 'copy',
           output_file
       ])
       print(f"Created segment: {output_file}")


def combine_video_and_segment(youtube_clips_dir, gameplay_segments_dir, output_dir):
   os.makedirs(output_dir, exist_ok=True)
   youtube_files = sorted([
       os.path.join(youtube_clips_dir, f) for f in os.listdir(youtube_clips_dir) if f.endswith(".mp4")
   ])
   gameplay_files = sorted([
       os.path.join(gameplay_segments_dir, f) for f in os.listdir(gameplay_segments_dir) if f.endswith(".mp4")
   ])


   if not youtube_files:
       print("No YouTube clips found. Ensure clips are saved in the directory.")
       return


   if not gameplay_files:
       print("No gameplay segments found. Ensure segments are saved in the directory.")
       return


   for i, (youtube_file, gameplay_file) in enumerate(zip(youtube_files, gameplay_files)):
       combined_output = os.path.join(output_dir, f"combined_{i + 1}.mp4")
       subprocess.call([
           'ffmpeg',
           '-i', youtube_file,
           '-i', gameplay_file,
           '-filter_complex', "[0:v]scale=1920:-1[top];[1:v]scale=1920:-1[bottom];[top][bottom]vstack=inputs=2[v]",
           '-map', "[v]",
           '-map', '0:a',
           '-c:v', 'libx264',
           '-crf', '23',
           '-preset', 'fast',
           '-c:a', 'aac',
           '-b:a', '128k',
           combined_output
       ])
       print(f"Created combined video: {combined_output}")


def capture_gameplay_video(output_dir):
   """Prompts the user for a gameplay video link and processes it."""
   video_url = input("Enter the YouTube video link for gameplay: ")
   gameplay_recording_file = "gameplay_recording.mp4"
   gameplay_segments_dir = os.path.join(output_dir, "gameplay_segments")


   # Record for 10 minutes
   duration = 10 * 60
   driver = play_video_in_browser(video_url, 0)
   record_screen_with_audio(duration, output_dir, gameplay_recording_file, delay=6)
   driver.quit()


   # Slice into 1-minute segments
   recording_file_path = os.path.join(output_dir, gameplay_recording_file)
   slice_video_into_segments(recording_file_path, 60, gameplay_segments_dir)
   return gameplay_segments_dir


def capture_video(video_url, output_dir, output_file_name, duration, start_time):
   driver = play_video_in_browser(video_url, start_time)
   record_screen_with_audio(duration, output_dir, output_file_name, delay=6)
   driver.quit()


def main(max_results, output_dir):
   os.makedirs(output_dir, exist_ok=True)
   API_KEY = "AIzaSyAkX-Wbi5kELJQW8M-RtTyV9IKaE_RuRXo"  # Replace with your actual API key
   youtube = build('youtube', 'v3', developerKey=API_KEY)
   popular_videos = fetch_popular_videos(youtube, max_results)


   if not popular_videos:
       print("No popular videos found.")
       return


   youtube_clips_dir = os.path.join(output_dir, "youtube_clips")
   combined_output_dir = os.path.join(output_dir, "combined_videos")
   os.makedirs(youtube_clips_dir, exist_ok=True)


   for i, popular_video in enumerate(popular_videos):
       print(f"Processing: {popular_video['title']}")
       try:
           video_url = f"https://www.youtube.com/watch?v={popular_video['video_id']}"
           output_file_name = f"video_{i}.mp4"
           video_duration = popular_video['duration']
           start_time = video_duration // 2
           record_duration = 60  # Record for 1 minute
           capture_video(video_url, youtube_clips_dir, output_file_name, record_duration, start_time)
           print(f"Recorded: {output_file_name}")
       except Exception as e:
           print(f"Error recording video {popular_video['title']}: {e}")


   gameplay_segments_dir = capture_gameplay_video(output_dir)


   print("Combining YouTube clips and gameplay segments...")
   combine_video_and_segment(youtube_clips_dir, gameplay_segments_dir, combined_output_dir)


if __name__ == "__main__":
   parser = argparse.ArgumentParser(description="YouTube video recording tool")
   parser.add_argument('-m', '--max_results', type=int, default=10, help='Maximum number of results')
   parser.add_argument('-o', '--output_dir', default='output', help='Output directory')
   args = parser.parse_args()
   main(args.max_results, args.output_dir)

